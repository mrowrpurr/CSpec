macro(expect actual)
    list(APPEND __expect_args ${ARGN})
    set(__expect_positive_assertion true)
    list(POP_FRONT __expect_args __expect_arg)
    string(TOLOWER "${__expect_arg}" __expect_arg_lower)
    if(__expect_arg_lower STREQUAL "not")
        set(__expect_positive_assertion false)
        list(POP_FRONT __expect_args __expect_arg)
        string(TOLOWER "${__expect_arg}" __expect_arg_lower)
    endif()
    if(__expect_arg_lower STREQUAL "to")
        list(POP_FRONT __expect_args __expect_arg)
        string(TOLOWER "${__expect_arg}" __expect_arg_lower)
    else()
        message(FATAL_ERROR "Unexpected argument provided to expect() '${__expect_arg}'")
    endif()
    set(__expect_assertion "${__expect_arg_lower}")
    if(__expect_arg_lower STREQUAL "be")
        list(POP_FRONT __expect_args __expect_arg)
        string(TOLOWER "${__expect_arg}" __expect_arg_lower)
        string(APPEND __expect_assertion "_${__expect_arg_lower}")
    endif()
    cmake_language(CALL "__expect_${__expect_assertion}" "${__expect_positive_assertion}" "${actual}" ${__expect_args})
endmacro()

macro(expect_fail message)
    if("${CMAKE_CURRENT_FUNCTION}" MATCHES ^__expect_)
        string(SUBSTRING "${CMAKE_CURRENT_FUNCTION}" 15 -1 __expect_fail_assertion_name)
        message(SEND_ERROR "${__expect_fail_assertion_name} failed: ${message}")
    else()
        message(SEND_ERROR "${message}")
    endif()
    return() # The calling context will return
endmacro()
