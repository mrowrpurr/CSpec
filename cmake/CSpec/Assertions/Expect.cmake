macro(expect actual)
    set(__expect_matcher_name "")
    set(__expect_matcher_args)
    set(__expect_matcher_positive true)

    block(PROPAGATE __expect_matcher_name __expect_matcher_positive __expect_matcher_args)
        list(APPEND __expect_matcher_args ${ARGN})
        list(POP_FRONT __expect_matcher_args arg)
        string(TOLOWER "${arg}" arg_lower)
        if(arg_lower STREQUAL "not")
            set(__expect_matcher_positive false)
            list(POP_FRONT __expect_matcher_args arg)
            string(TOLOWER "${arg}" arg_lower)
        endif()
        if(arg_lower STREQUAL "to")
            list(POP_FRONT __expect_matcher_args arg)
            string(TOLOWER "${arg}" arg_lower)
        else()
            message(FATAL_ERROR "Unexpected argument provided to expect() '${arg}'")
        endif()
        set(__expect_matcher_name "${arg_lower}")
        if(arg_lower STREQUAL "be")
            list(POP_FRONT __expect_matcher_args arg)
            string(TOLOWER "${arg}" arg_lower)
            string(APPEND __expect_matcher_name "_${arg_lower}")
        endif()
        get_property(matcher_names GLOBAL PROPERTY CSPEC_MATCHERS)
        while(__expect_matcher_args AND NOT "${__expect_matcher_name}" IN_LIST matcher_names)
            list(POP_FRONT __expect_matcher_args arg)
            string(APPEND __expect_matcher_name "_${arg}")
        endwhile()
        if(NOT "${__expect_matcher_name}" IN_LIST matcher_names)
            separate_arguments(printable_args NATIVE_COMMAND "${ARGV}")
            string(REGEX REPLACE ";" " " printable_args "${printable_args}")
            message(FATAL_ERROR "expect(${printable_args}) matcher not found")
            return()
        endif()
    endblock()

    cmake_language(CALL "__expect_${__expect_matcher_name}" "${__expect_matcher_positive}" "${actual}" ${__expect_matcher_args})
endmacro()

macro(expect_fail message)
    if(DEFINED __expect_matcher_name)
        message(SEND_ERROR "${__expect_matcher_name} failed: ${message}")
    else()
        message(SEND_ERROR "${message}")
    endif()
    return() # The calling context will return!
endmacro()

macro(register_expect_matcher matcher_name)
    set_property(GLOBAL APPEND PROPERTY CSPEC_MATCHERS "${matcher_name}")
endmacro()
