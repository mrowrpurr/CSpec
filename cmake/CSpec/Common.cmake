set(CSpecVersion 0.2.0)

macro(__cspec_get_var out_varname cspec_varname default_value)
    if(DEFINED CSPEC_${cspec_varname})
        set(${out_varname} ${CSPEC_${cspec_varname}})
    elseif(DEFINED ENV{CSPEC_${cspec_varname}})
        set(${out_varname} $ENV{CSPEC_${cspec_varname}})
    elseif(DEFINED CSPEC_DEFAULT_${cspec_varname})
        set(${out_varname} ${CSPEC_DEFAULT_${cspec_varname}})
    else()
        set(${out_varname} "${default_value}")
    endif()
endmacro()

# if(NOT DEFINED CSPEC_DEBUG_LEVEL)
#     set(CSPEC_DEBUG_LEVEL TRACE)
# endif()

if(NOT DEFINED CSPEC_OUTPUT_TYPE)
    __cspec_get_var(CSPEC_OUTPUT_TYPE CSPEC_OUPUT_TYPE "MESSAGE")
endif()

file(REAL_PATH "${CSPEC_OUTPUT_LOG}" CSPEC_OUTPUT_LOG)
if(DEFINED CSPEC_OUTPUT_LOG AND EXISTS "${CSPEC_OUTPUT_LOG}")
    file(REMOVE "${CSPEC_OUTPUT_LOG}")
    file(WRITE "${CSPEC_OUTPUT_LOG}" "\n")
endif()

function(__cspec_output)
    if(${ARGC} EQUAL 1)
        set(level STATUS)
        set(text "${ARGV}")
    else()
        list(POP_FRONT ARGV level)
        set(text "${ARGV}")
    endif()

    if(CSPEC_OUTPUT_TYPE STREQUAL "MESSAGE")
        message("${level}" "${text}")
    elseif(CSPEC_OUTPUT_TYPE STREQUAL "LOG")
        if(DEFINED CSPEC_OUTPUT_LOG)
            file(APPEND "${CSPEC_OUTPUT_LOG}" "${text}\n")
        endif()
    elseif(CSPEC_OUTPUT_TYPE STREQUAL "BOTH")
        message("${level}" "${text}")
        if(DEFINED CSPEC_OUTPUT_LOG)
            file(APPEND "${CSPEC_OUTPUT_LOG}" "${text}\n")
        endif()
    endif()
endfunction()

macro(__cspec_error text)
    __cspec_output(FATAL_ERROR "[CSPEC ERROR]: ${text}")
endmacro()

macro(__cspec_debug text)
    if(CSPEC_DEBUG)
        __cspec_output("${CSPEC_DEBUG_LEVEL}" "${text}")
    endif()
endmacro()

macro(__cspec_debug_fn)
     __cspec_debug("${CMAKE_CURRENT_FUNCTION}(${ARGV})")
endmacro()

macro(__cspec_arg_parse)
    cmake_parse_arguments(_cspec_arg_parse "" "" "FLAGS;VALUES;MULTI;ARGS" ${ARGN})
    __cspec_debug_fn(${_cspec_arg_parse_ARGS})
    cmake_parse_arguments("${CMAKE_CURRENT_FUNCTION}" "${_cspec_arg_parse_OPTIONS}" "${_cspec_arg_parse_VALUES}" "${_cspec_arg_parse_MULTI}" ${_cspec_arg_parse_ARGS})
    set(arg_prefix "${CMAKE_CURRENT_FUNCTION}_")
endmacro()

function(__cspec_pretty_print_output raw_output)
    if(NOT "${raw_output}" STREQUAL "")
        set(output "")
        string(REGEX REPLACE "\n" ";" output_lines "${raw_output}")
        set(i 0)
        foreach(line ${output_lines})
            if(NOT CSPEC_EXTRA_VERBOSE AND (line MATCHES "^-- " OR line MATCHES "See also .*CMake.*.log" OR line MATCHES "^[ ]+$" OR line MATCHES "CMake Error.*Expect.cmake" OR line MATCHES "CSpec/Assertions/.*.cmake"))
                continue()
            endif()
            set(indent "        ")
            set(after "")
            if(line MATCHES " failed: ")
                set(indent "   ")
                set(after "\n")
            endif()
            if(i EQUAL 0)
                string(APPEND output "${indent}${line}${after}")
            else()
                string(APPEND output "\n${indent}${line}${after}")
            endif()
            math(EXPR i "${i}+1")
        endforeach()
        if(output)
            __cspec_output("${output}")
        endif()
    endif()
endfunction()
